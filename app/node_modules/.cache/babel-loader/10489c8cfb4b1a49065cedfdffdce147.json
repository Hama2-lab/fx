{"ast":null,"code":"var _jsxFileName = \"/Users/hamatsumitsuyasu/Desktop/\\u30B7\\u30B9\\u30C6\\u30E0\\u958B\\u767AB/app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport \"./reset.css\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState();\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\"http://localhost:8000/fx\"\n      // \"https://www.alphavantage.co/query?function=FX_DAILY&from_symbol=USD&to_symbol=JPY&apikey=4THZE2SRL8MOGD1C\"\n      );\n\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [...Object.entries(JSON.parse(json.train).close), ...Object.entries(JSON.parse(json.valid).close)];\n        setData(dataList);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: JSON.stringify(data)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n_c = App;\n/*#__PURE__*/_jsxDEV(ComposedChart //グラフ全体のサイズや位置、データを指定。場合によってmarginで上下左右の位置を指定する必要あり。\n, {\n  width: 600 //グラフ全体の幅を指定\n  ,\n  height: 280 //グラフ全体の高さを指定\n  ,\n  data: JSON.stringify(data) //ここにArray型のデータを指定\n  ,\n  margin: {\n    top: 20,\n    right: 60,\n    bottom: 0,\n    left: 0\n  } //marginを指定\n  ,\n  children: [/*#__PURE__*/_jsxDEV(XAxis, {\n    dataKey: \"day\" //Array型のデータの、X軸に表示したい値のキーを指定\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this), \" //hover\\u3057\\u305F\\u6642\\u306B\\u5404\\u30D1\\u30E9\\u30E1\\u30FC\\u30BF\\u30FC\\u306E\\u8A73\\u7D30\\u3092\\u898B\\u308C\\u308B\\u3088\\u3046\\u306B\\u8A2D\\u5B9A\", /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this), \" // \\u51E1\\u4F8B\\u3092\\u8868\\u793A(\\u56F3\\u306E\\u3010\\u58F2\\u4E0A\\u3011\\u3010\\u7DCF\\u58F2\\u4E0A\\u3011)\", /*#__PURE__*/_jsxDEV(CartesianGrid //グラフのグリッドを指定\n  , {\n    stroke: \"#f5f5f5\" //グリッド線の色を指定\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Area //面積を表すグラフ\n  , {\n    type: \"monotone\" //グラフが曲線を描くように指定。default値は折れ線グラフ\n    ,\n    dataKey: \"\\u7DCF\\u58F2\\u4E0A\" //Array型のデータの、Y軸に表示したい値のキーを指定\n    ,\n    stroke: \"#00aced\" ////グラフの線の色を指定\n    ,\n    fillOpacity: 1 ////グラフの中身の薄さを指定\n    ,\n    fill: \"rgba(0, 172, 237, 0.2)\" //グラフの色を指定\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Bar //棒グラフ\n  , {\n    dataKey: \"\\u58F2\\u4E0A\" //Array型のデータの、Y軸に表示したい値のキーを指定\n    ,\n    barSize: 20 //棒の太さを指定\n    ,\n    stroke: \"rgba(34, 80, 162, 0.2)\" ////レーダーの線の色を指定\n    ,\n    fillOpacity: 1 //レーダーの中身の色の薄さを指定\n    ,\n    fill: \"#2250A2\" ////レーダーの中身の色を指定\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 1\n}, this);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","App","data","setData","result","fetch","json","train","valid","dataList","Object","entries","JSON","parse","close","stringify","top","right","bottom","left"],"sources":["/Users/hamatsumitsuyasu/Desktop/システム開発B/app/src/App.jsx"],"sourcesContent":["import \"./App.css\";\nimport \"./reset.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\n        \"http://localhost:8000/fx\"\n        // \"https://www.alphavantage.co/query?function=FX_DAILY&from_symbol=USD&to_symbol=JPY&apikey=4THZE2SRL8MOGD1C\"\n      );\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [\n          ...Object.entries(JSON.parse(json.train).close),\n          ...Object.entries(JSON.parse(json.valid).close),\n        ];\n        setData(dataList);\n      }\n    })();\n  }, []);\n\n  return <div>{JSON.stringify(data)}</div>;\n}\n<ComposedChart //グラフ全体のサイズや位置、データを指定。場合によってmarginで上下左右の位置を指定する必要あり。\n  width={600} //グラフ全体の幅を指定\n  height={280} //グラフ全体の高さを指定\n  data={JSON.stringify(data)} //ここにArray型のデータを指定\n  margin={{ top: 20, right: 60, bottom: 0, left: 0 }} //marginを指定\n>\n  <XAxis\n    dataKey=\"day\" //Array型のデータの、X軸に表示したい値のキーを指定\n  />\n  <YAxis />\n  <Tooltip /> //hoverした時に各パラメーターの詳細を見れるように設定\n  <Legend /> // 凡例を表示(図の【売上】【総売上】)\n  <CartesianGrid //グラフのグリッドを指定\n    stroke=\"#f5f5f5\" //グリッド線の色を指定\n  />\n  <Area //面積を表すグラフ\n    type=\"monotone\" //グラフが曲線を描くように指定。default値は折れ線グラフ\n    dataKey=\"総売上\" //Array型のデータの、Y軸に表示したい値のキーを指定\n    stroke=\"#00aced\" ////グラフの線の色を指定\n    fillOpacity={1} ////グラフの中身の薄さを指定\n    fill=\"rgba(0, 172, 237, 0.2)\" //グラフの色を指定\n  />\n  <Bar //棒グラフ\n    dataKey=\"売上\" //Array型のデータの、Y軸に表示したい値のキーを指定\n    barSize={20} //棒の太さを指定\n    stroke=\"rgba(34, 80, 162, 0.2)\" ////レーダーの線の色を指定\n    fillOpacity={1} //レーダーの中身の色の薄さを指定\n    fill=\"#2250A2\" ////レーダーの中身の色を指定\n  />\n</ComposedChart>;\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAO,aAAa;AACpB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,QAAQ,EAAE;EAElCD,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,MAAMK,MAAM,GAAG,MAAMC,KAAK,CACxB;MACA;MAAA,CACD;;MACD,MAAMC,IAAI,GAAG,MAAMF,MAAM,CAACE,IAAI,EAAE;MAChC,IAAIA,IAAI,CAACC,KAAK,IAAID,IAAI,CAACE,KAAK,EAAE;QAC5B,MAAMC,QAAQ,GAAG,CACf,GAAGC,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACC,KAAK,CAAC,CAACO,KAAK,CAAC,EAC/C,GAAGJ,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACE,KAAK,CAAC,CAACM,KAAK,CAAC,CAChD;QACDX,OAAO,CAACM,QAAQ,CAAC;MACnB;IACF,CAAC,GAAG;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO;IAAA,UAAMG,IAAI,CAACG,SAAS,CAACb,IAAI;EAAC;IAAA;IAAA;IAAA;EAAA,QAAO;AAC1C;AAAC,GArBQD,GAAG;AAAA,KAAHA,GAAG;AAsBZ,qBAAC,aAAa,CAAC;AAAA;EACb,KAAK,EAAE,GAAI,CAAC;EAAA;EACZ,MAAM,EAAE,GAAI,CAAC;EAAA;EACb,IAAI,EAAEW,IAAI,CAACG,SAAS,CAACb,IAAI,CAAE,CAAC;EAAA;EAC5B,MAAM,EAAE;IAAEc,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAE,CAAC;EAAA;EAAA,wBAEpD,QAAC,KAAK;IACJ,OAAO,EAAC,KAAK,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACd,eACF,QAAC,KAAK;IAAA;IAAA;IAAA;EAAA,QAAG,eACT,QAAC,OAAO;IAAA;IAAA;IAAA;EAAA,QAAG,qKACX,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG,yHACV,QAAC,aAAa,CAAC;EAAA;IACb,MAAM,EAAC,SAAS,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACjB,eACF,QAAC,IAAI,CAAC;EAAA;IACJ,IAAI,EAAC,UAAU,CAAC;IAAA;IAChB,OAAO,EAAC,oBAAK,CAAC;IAAA;IACd,MAAM,EAAC,SAAS,CAAC;IAAA;IACjB,WAAW,EAAE,CAAE,CAAC;IAAA;IAChB,IAAI,EAAC,wBAAwB,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9B,eACF,QAAC,GAAG,CAAC;EAAA;IACH,OAAO,EAAC,cAAI,CAAC;IAAA;IACb,OAAO,EAAE,EAAG,CAAC;IAAA;IACb,MAAM,EAAC,wBAAwB,CAAC;IAAA;IAChC,WAAW,EAAE,CAAE,CAAC;IAAA;IAChB,IAAI,EAAC,SAAS,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACf;AAAA;EAAA;EAAA;EAAA;AAAA,QACY;AAChB,eAAelB,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}