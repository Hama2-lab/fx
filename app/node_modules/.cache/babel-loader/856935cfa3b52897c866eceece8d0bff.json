{"ast":null,"code":"var _jsxFileName = \"/Users/hamatsumitsuyasu/Desktop/\\u30B7\\u30B9\\u30C6\\u30E0\\u958B\\u767AB/app/src/App.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport \"./App.css\";\nimport \"./reset.css\";\nimport { useEffect, useState } from \"react\";\nimport React, { PureComponent } from \"react\";\nimport { XAxis, YAxis, Tooltip, Legend, CartesianGrid, LineChart, Line } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useFetchCloseData = () => {\n  _s();\n  const [closeData, setCloseData] = useState();\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\"http://localhost:8000/fx\");\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [...Object.entries(JSON.parse(json.train).close), ...Object.entries(JSON.parse(json.valid).close)].map(item => ({\n          name: item[0],\n          close: item[1]\n        }));\n        setCloseData(dataList);\n        console.log(dataList);\n      }\n    })();\n  }, []);\n  return {\n    closeData\n  };\n};\n_s(useFetchCloseData, \"kFBSTAf0y+mVNB+aACn6Vuzr02w=\");\nconst useFetchPredictionsData = () => {\n  _s2();\n  const [predictionsData, setPredictionsData] = useState();\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\"http://localhost:8000/fx\");\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [\n        // ...Object.entries(JSON.parse(json.train)[\"Predictions\"]),\n        ...Object.entries(JSON.parse(json.valid)[\"Predictions\"])].map(item => ({\n          name: item[0],\n          predictions: item[1]\n        }));\n        setPredictionsData(dataList);\n        console.log(dataList);\n      }\n    })();\n  }, []);\n  return {\n    predictionsData\n  };\n};\n_s2(useFetchPredictionsData, \"7MJbhVpe6kJm1h7ulMzHxYB05JI=\");\nfunction App() {\n  _s3();\n  const {\n    closeData\n  } = useFetchCloseData();\n  const {\n    predictionsData\n  } = useFetchPredictionsData();\n  const dataSet = Object.assign(closeData || {}, predictionsData || {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      data: dataSet,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"close\",\n        stroke: \"#8884d8\"\n        // activeDot={{ r: 8 }}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"predictions\",\n        stroke: \"#82ca9d\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"bSZkIQY4cJ0W1/3yIBppjkLHcfE=\", false, function () {\n  return [useFetchCloseData, useFetchPredictionsData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","React","PureComponent","XAxis","YAxis","Tooltip","Legend","CartesianGrid","LineChart","Line","useFetchCloseData","closeData","setCloseData","result","fetch","json","train","valid","dataList","Object","entries","JSON","parse","close","map","item","name","console","log","useFetchPredictionsData","predictionsData","setPredictionsData","predictions","App","dataSet","assign","top","right","left","bottom","r"],"sources":["/Users/hamatsumitsuyasu/Desktop/システム開発B/app/src/App.jsx"],"sourcesContent":["import \"./App.css\";\nimport \"./reset.css\";\nimport { useEffect, useState } from \"react\";\nimport React, { PureComponent } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n  LineChart,\n  Line,\n} from \"recharts\";\n\nconst useFetchCloseData = () => {\n  const [closeData, setCloseData] = useState();\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\"http://localhost:8000/fx\");\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [\n          ...Object.entries(JSON.parse(json.train).close),\n          ...Object.entries(JSON.parse(json.valid).close),\n        ].map((item) => ({ name: item[0], close: item[1] }));\n\n        setCloseData(dataList);\n        console.log(dataList);\n      }\n    })();\n  }, []);\n\n  return { closeData };\n};\nconst useFetchPredictionsData = () => {\n  const [predictionsData, setPredictionsData] = useState();\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\"http://localhost:8000/fx\");\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [\n          // ...Object.entries(JSON.parse(json.train)[\"Predictions\"]),\n          ...Object.entries(JSON.parse(json.valid)[\"Predictions\"]),\n        ].map((item) => ({ name: item[0], predictions: item[1] }));\n\n        setPredictionsData(dataList);\n        console.log(dataList);\n      }\n    })();\n  }, []);\n\n  return { predictionsData };\n};\n\nfunction App() {\n  const { closeData } = useFetchCloseData();\n  const { predictionsData } = useFetchPredictionsData();\n\n  const dataSet = Object.assign(closeData || {}, predictionsData || {});\n\n  return (\n    <div>\n      {/* {JSON.stringify(data)} */}\n\n      <LineChart\n        width={500}\n        height={300}\n        data={dataSet}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"close\"\n          stroke=\"#8884d8\"\n          // activeDot={{ r: 8 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"predictions\"\n          stroke=\"#82ca9d\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}