{"ast":null,"code":"var _jsxFileName = \"/Users/hamatsumitsuyasu/Desktop/\\u30B7\\u30B9\\u30C6\\u30E0\\u958B\\u767AB/app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport \"./reset.css\";\nimport { useEffect, useState } from \"react\";\nimport React, { PureComponent } from \"react\";\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Bar } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState();\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\"http://localhost:8000/fx\"\n      // \"https://www.alphavantage.co/query?function=FX_DAILY&from_symbol=USD&to_symbol=JPY&apikey=4THZE2SRL8MOGD1C\"\n      );\n\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [...Object.entries(JSON.parse(json.train).close), ...Object.entries(JSON.parse(json.valid).close)];\n        setData(dataList);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [JSON.stringify(data), /*#__PURE__*/_jsxDEV(ComposedChart //グラフ全体のサイズや位置、データを指定。場合によってmarginで上下左右の位置を指定する必要あり。\n    , {\n      width: 600 //グラフ全体の幅を指定\n      ,\n      height: 280 //グラフ全体の高さを指定\n      ,\n      data: JSON.stringify(data) //ここにArray型のデータを指定\n      ,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 0\n      } //marginを指定\n      ,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"day\" //Array型のデータの、X軸に表示したい値のキーを指定\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), \" //hover\\u3057\\u305F\\u6642\\u306B\\u5404\\u30D1\\u30E9\\u30E1\\u30FC\\u30BF\\u30FC\\u306E\\u8A73\\u7D30\\u3092\\u898B\\u308C\\u308B\\u3088\\u3046\\u306B\\u8A2D\\u5B9A\", /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), \" // \\u51E1\\u4F8B\\u3092\\u8868\\u793A(\\u56F3\\u306E\\u3010\\u58F2\\u4E0A\\u3011\\u3010\\u7DCF\\u58F2\\u4E0A\\u3011)\", /*#__PURE__*/_jsxDEV(CartesianGrid //グラフのグリッドを指定\n      , {\n        stroke: \"#f5f5f5\" //グリッド線の色を指定\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar //棒グラフ\n      , {\n        dataKey: \"\\u58F2\\u4E0A\" //Array型のデータの、Y軸に表示したい値のキーを指定\n        ,\n        barSize: 20 //棒の太さを指定\n        ,\n        stroke: \"rgba(34, 80, 162, 0.2)\" ////レーダーの線の色を指定\n        ,\n        fillOpacity: 1 //レーダーの中身の色の薄さを指定\n        ,\n        fill: \"#2250A2\" ////レーダーの中身の色を指定\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","React","PureComponent","ComposedChart","XAxis","YAxis","Tooltip","Legend","CartesianGrid","Bar","App","data","setData","result","fetch","json","train","valid","dataList","Object","entries","JSON","parse","close","stringify","top","right","bottom","left"],"sources":["/Users/hamatsumitsuyasu/Desktop/システム開発B/app/src/App.jsx"],"sourcesContent":["import \"./App.css\";\nimport \"./reset.css\";\nimport { useEffect, useState } from \"react\";\nimport React, { PureComponent } from \"react\";\nimport {\n  ComposedChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n  Bar,\n} from \"recharts\";\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(\n        \"http://localhost:8000/fx\"\n        // \"https://www.alphavantage.co/query?function=FX_DAILY&from_symbol=USD&to_symbol=JPY&apikey=4THZE2SRL8MOGD1C\"\n      );\n      const json = await result.json();\n      if (json.train && json.valid) {\n        const dataList = [\n          ...Object.entries(JSON.parse(json.train).close),\n          ...Object.entries(JSON.parse(json.valid).close),\n        ];\n        setData(dataList);\n      }\n    })();\n  }, []);\n\n  return (\n    <div>\n      {JSON.stringify(data)}\n      <ComposedChart //グラフ全体のサイズや位置、データを指定。場合によってmarginで上下左右の位置を指定する必要あり。\n        width={600} //グラフ全体の幅を指定\n        height={280} //グラフ全体の高さを指定\n        data={JSON.stringify(data)} //ここにArray型のデータを指定\n        margin={{ top: 20, right: 60, bottom: 0, left: 0 }} //marginを指定\n      >\n        <XAxis\n          dataKey=\"day\" //Array型のデータの、X軸に表示したい値のキーを指定\n        />\n        <YAxis />\n        <Tooltip /> //hoverした時に各パラメーターの詳細を見れるように設定\n        <Legend /> // 凡例を表示(図の【売上】【総売上】)\n        <CartesianGrid //グラフのグリッドを指定\n          stroke=\"#f5f5f5\" //グリッド線の色を指定\n        />\n        <Bar //棒グラフ\n          dataKey=\"売上\" //Array型のデータの、Y軸に表示したい値のキーを指定\n          barSize={20} //棒の太さを指定\n          stroke=\"rgba(34, 80, 162, 0.2)\" ////レーダーの線の色を指定\n          fillOpacity={1} //レーダーの中身の色の薄さを指定\n          fill=\"#2250A2\" ////レーダーの中身の色を指定\n        />\n      </ComposedChart>\n      )\n    </div>\n  );\n}\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAO,aAAa;AACpB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,IAAIC,aAAa,QAAQ,OAAO;AAC5C,SACEC,aAAa,EACbC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,aAAa,EACbC,GAAG,QACE,UAAU;AAAC;AAElB,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,EAAE;EAElCD,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,MAAMc,MAAM,GAAG,MAAMC,KAAK,CACxB;MACA;MAAA,CACD;;MACD,MAAMC,IAAI,GAAG,MAAMF,MAAM,CAACE,IAAI,EAAE;MAChC,IAAIA,IAAI,CAACC,KAAK,IAAID,IAAI,CAACE,KAAK,EAAE;QAC5B,MAAMC,QAAQ,GAAG,CACf,GAAGC,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACC,KAAK,CAAC,CAACO,KAAK,CAAC,EAC/C,GAAGJ,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACE,KAAK,CAAC,CAACM,KAAK,CAAC,CAChD;QACDX,OAAO,CAACM,QAAQ,CAAC;MACnB;IACF,CAAC,GAAG;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,WACGG,IAAI,CAACG,SAAS,CAACb,IAAI,CAAC,eACrB,QAAC,aAAa,CAAC;IAAA;MACb,KAAK,EAAE,GAAI,CAAC;MAAA;MACZ,MAAM,EAAE,GAAI,CAAC;MAAA;MACb,IAAI,EAAEU,IAAI,CAACG,SAAS,CAACb,IAAI,CAAE,CAAC;MAAA;MAC5B,MAAM,EAAE;QAAEc,GAAG,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAE,CAAE,CAAC;MAAA;MAAA,wBAEpD,QAAC,KAAK;QACJ,OAAO,EAAC,KAAK,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACd,eACF,QAAC,KAAK;QAAA;QAAA;QAAA;MAAA,QAAG,eACT,QAAC,OAAO;QAAA;QAAA;QAAA;MAAA,QAAG,qKACX,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,yHACV,QAAC,aAAa,CAAC;MAAA;QACb,MAAM,EAAC,SAAS,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACjB,eACF,QAAC,GAAG,CAAC;MAAA;QACH,OAAO,EAAC,cAAI,CAAC;QAAA;QACb,OAAO,EAAE,EAAG,CAAC;QAAA;QACb,MAAM,EAAC,wBAAwB,CAAC;QAAA;QAChC,WAAW,EAAE,CAAE,CAAC;QAAA;QAChB,IAAI,EAAC,SAAS,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACf;IAAA;MAAA;MAAA;MAAA;IAAA,QACY;EAAA;IAAA;IAAA;IAAA;EAAA,QAEZ;AAEV;AAAC,GAjDQlB,GAAG;AAAA,KAAHA,GAAG;AAkDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}